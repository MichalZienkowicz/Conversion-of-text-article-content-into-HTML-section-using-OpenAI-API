import openai
import json

def get_completion(api_key, messages, model="gpt-4o", temperature=0, max_tokens=10000, tools=None, tool_choice=None):
    """
    Function runs openai.client.chat.completion with given parameters
    """
    client = openai.OpenAI(api_key = api_key)
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
        tools=tools,
        tool_choice=tool_choice
    )
    return response.choices[0].message

def generate_prompt_sentence(image_content, 
                            image_type, 
                            image_style, 
                            image_mood="",
                            image_background="",  
                            image_lighting="", 
                            creator_reference=""): 
                            #additional_parameter=""):
    """
    Generates image generation prompt sentence
    """
    prompt_sentence = f"{image_type}, {image_content}, styl {image_style}"

    if image_background:
         prompt_sentence += f", {image_background} jako tło"
    for image_parameter in [image_mood, image_lighting]:#, additional_parameter]:
        if image_parameter:
             prompt_sentence += f", {image_parameter}"
    if creator_reference:
         prompt_sentence += f", w stylu {creator_reference}"

    return prompt_sentence

def prompts_response_into_string(prompts_extraction_response):
    """
    Function onverts multiple tool_calls into single string containing image generation prompts
    prompts_xtraction_response (ChatCompletionMessage object);
    """
    prompts_result_string = ""  
    max_iterations = len(prompts_extraction_response.tool_calls)
    i = 0
    while i < max_iterations-1:
        i += 1    
        args = json.loads(prompts_extraction_response.tool_calls[i].function.arguments)
        prompt_result = generate_prompt_sentence(**args)
        prompts_result_string += f"'{prompt_result}'; "

    return prompts_result_string

def generate_html_from_text(openai_api_key, article_content):
    """
    Function is creating an inside of html <body> </body> from an article content provided in text.
    Uses gpt-4o model.
    
    Arguments:
    article_content (str): - content of an article
    openai_api_key (str): - a key to connect with openai API
    
    Returns:
    generated_html_code (str): - inside of a html <body> </body> section generated by API model
    """

    prompts_extraction_messages=[
    {
        "role": "system", 
        "content": """Twoim zadaniem jest profesjonalne tworzenie plików, na których prezentowane są artykuły. 
            Realizujesz to przekształcając treść zadanego artykułu na fragment kodu HTML w następujący sposób:
            - Generujesz plik HTML o niepełnej strukturze - jedynie zawartość wnętrza sekcji <body> </body>
            - Tworzysz sekcje tagiem <section> dla poszczególnych paragrafów
            - Wstawiasz nagłówki znajdujące się w treści artykułu, lecz nie tworzysz ich samemu na podstawie treści
            - Wstawiasz akapity oraz oznaczasz miejsca na obrazy tagiem <img src="image_placeholder.jpg">.
            - Do każdego <img> dodajesz atrybut alt, którego treść stanowi prompt do wygenerowania grafiki przez model AI.
            
            Prompty do generowania obrazów MUSZĄ zawierać zdefiniowany:
            typ obrazu; bardzo konkretną treść obrazu; styl obrazu; 
            oraz opcjonalnie mogą zawierać zdefiniowany:
            nastrój obrazu, tło obrazu, oświetlenie obrazu, referencję do stylu twórcy; dodatkowy parametr opisujący obraz;

            Uwaga! Przed zaakceptowaniem parametrów promptu sprawdzasz, upewnij się że:
                - treść obrazu nie zawiera wulgarnych treści - niezależnie od treści artykułu.
                - treść obrazu jest konkretnym obiektem o oczywistej interpretacji, A NIE abstrakcyjnym lub symbolicznym pojęciem (na przykład "zegar", a nie "symbolika upływania czasu")
            Jeżeli jest inaczej zmień parametru promptu na bardziej precyzyjne."""
    },
    {
        "role": "user",
        "content": f"Przekształć na wnętrze sekcji <body> w pliku HTML treść artykułu: \n{article_content}"
    }
]
    
    # Olny for prompt extracting
    tools = [
    {
        "type": "function",
        "function": {
            "name": "generate_prompt_sentence",
            "description": "Funkcja tworzy prompt który będzie użyty do wygenerowania obrazu za pomocą modelu AI. Prompt jest generowany na podstawie zadanych parametrów, z których układane jest zdanie. Parametry określone jako nie przyjmują innych wartości.",
            "parameters": {
                "type": "object",
                "properties": {
                    "image_content": {
                        "type": "string",
                        "description": "Bardzo dokładny i prezycyjny opis obiektów, osób lub czynności, które zawierać będzie obraz."
                    },
                    "image_type": {
                        "type": "string",
                        "enum": ["Zdjęcie", "Obraz", "Panorama", "Portret", "Rysunek", "Plakat", "Concept art", "Ilustracja", "Miniatura", "Rzeźba", "Kadr z filmu", "Piksel art", "Grafika fotorealistyczna"]
                    },
                    "image_style": {
                        "type": "string", 
                        "enum": ["impresjonistyczny", "nowoczesny", "cyberpunk", "ekspresjonistyczny", "realistyczny", "minimalistyczny", "surrealistyczny", "futurystyczny", "retro-futurystyczny", "barokowy", "renesansowy", "średniowieczny", "neo-noir"]
                    },
                    "image_mood": {
                        "type": "string", 
                        "enum": ["mroczny", "pogodny", "tajemniczy", "melancholijny", "radosny", "intensywny", "poważny", "podniosły", "komiczny", "nostalgiczny", "groteskowy", "ekscytujący", "spokojny", "złowieszczy", "dynamiczny", "optymistyczny"]
                    },
                    "image_background": {
                        "type": "string",
                        "description": "Opis tła, na którym przedstawione będą obiekty z image_content."
                    },
                    "image_lighting": {
                        "type": "string", 
                        "description": "Opis oświetlenia w obrazie odpowiadający jego treści."
                    },
                    "creator_reference": {
                        "type": "string",
                        "description": "Imię i nazwisko twórcy, którego styl ma być odwzorowany."
                    },
                    # "unadditional_parameter": {
                    #     "type": "string", 
                    #     "description": "Ewentualna dodatkowa informacja o treści lub sposobu wyświetlania obrazu."
                    # },
                },
                "required": ["image_content", "image_type", "image_style"],
            },
        },   
    }
]
    
    # generating image prompts 
    prompts_extraction_response = get_completion(openai_api_key, prompts_extraction_messages, temperature=0, tools=tools)
    prompts_result_string = prompts_response_into_string(prompts_extraction_response)

    html_section_extraction_messages = [
    {
        "role": "system", 
        "content": """Twoim zadaniem jest profesjonalne tworzenie plików, na których prezentowane są artykuły. 
            Realizujesz to przekształcając całą treść zadanego artykułu na fragment kodu HTML w następujący sposób:
            - Generujesz plik HTML o niepełnej strukturze - jedynie zawartość wnętrza sekcji <body> </body>
            - Tworzysz sekcje tagiem <section> dla poszczególnych paragrafów
            - Tworzysz tag <header> dla głównego nagłówka
            - Wstawiasz nagłówki znajdujące się w treści artykułu, lecz nie tworzysz ich samemu na podstawie treści
            - Wstawiasz akapity oraz oznaczasz miejsca na obrazy tagiem <img src="image_placeholder.jpg">.
            - Do każdego <img> dodajesz atrybut alt, którego treść stanowi otrzymany od użytkownika prompt do wygenerowania grafiki przez model AI.
            - Dodajesz podpisy pod obrazkami za pomocą tagów <figcaption>.
            
            """
    },
    {
        "role": "user",
        "content": f"Przekształć na wnętrze sekcji <body> w pliku HTML treść artykułu: \n{article_content}\n. Wykorzystaj moje prompty do stworzenia atrybutów alt dla obrazów: {prompts_result_string} "
    }
]

    html_section_extraction_response = get_completion(openai_api_key, html_section_extraction_messages, temperature=0.1, tools=tools, tool_choice="none")

    html_section_extraction = html_section_extraction_response.content

    # excluding initial "```html" and final "```" from generated response
    generated_html_code = html_section_extraction[8:-4]
    return generated_html_code